---
title: "Supplementary Materials: How dispersal can affect biodiversity and vice versa while considering macroevolutionary processes"
authors:
  - Hagen O
  - Viana SD 
  - Wiegand T
  - Chase JM 
  - Onstein RE
format: pdf
editor: visual
execute: 
  echo: false
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-libs and data
library(here)
library(fields)
library(RRphylo)
library(corrplot)
# library(rcartocolor)
dir_base <- "code/2_scripts"
here::i_am("./code/2_scripts/source.R")
source(here(dir_base,"source.R"))

# bypass is.interactive() trigered by quarto
pls <- list(
  "dir_base"=file.path(dir_base, "cluster"),
  "dir_out"="c:/temp/dispdiv3/output",
  "dir_env_gen"="c:/temp/dispdiv3/mx_space/ddl",
  "dir_config_gen"="../../1_gen3sis_formalization/config",
  "dir_out_zip"="c:/temp/dispdiv3/outputs_eve"
  )
source(here(pls$dir_base,"../local/supp_func.R"))
source(here(pls$dir_base,"summary_stats/support", "sup_plot_summary.R"))
source(here(pls$dir_base,"summary_stats/support", "sup_plot_traits.R"))
source(here(pls$dir_base,"summary_stats/support", "call_stats_zip.R"))
# get summary files for all model!
ss_f <-get_ordered_files(file.path(pls$dir_out_zip, "temp_summary"), model=".rds", fend=".rds")
ss_f <- ss_f[1:3] # select only main stats
sss <- list()
for (i in 1:length(ss_f)){
  sss[[i]] <- readRDS(file.path(pls$dir_out_zip, "temp_summary", ss_f[i]))
}
names(sss) <- unlist(lapply(strsplit(ss_f, "_"), function(x){
  r <- x[length(x)] # TODO expp names hare
  r <- gsub(".rds", "", r)
  return(r)
}))

for (li in 1:length(sss)){
  sss[[li]]$stats$tt <- lapply(sss[[li]]$stats$tt, as.data.frame)
}

```

# Eco-evolutionary models

All models, i.e. M0, M1 and M2, were initiated at 5 Ma with three species, each with populations spread thought the suitable sites of each patch (i.e. sp1 on patch A, sp2 on patch B, and sp3 on patch C). Initial populations had niche width $\omega_i=0.4$ and temperature niche optima equal to the local mean temperature $T_i=T_{mean}$. In short, M0 assume a fixed dispersal and competitive traits for all species within a simulation (n=`r nrow(sss$M0$parms)`). M1 breaks this assumption by allowing dispersal and competitive traits to evolve freely, thus diverging with time between species (n=`r nrow(sss$M1$parms)`). M2 adds a zero sum (i.e. a trade-off) between dispersal and competitive traits, assuming that no super species (i.e. $d_i=1$ , $l_i=1$) are possible (n=`r nrow(sss$M2$parms)`). M0 serves as a reference and allowed the exploration of parameter ranges and sensitivity the system. The two alternative simulation scenarios (i.e. M1 and M2), referred to as counterfactuals, investigate the effects of manipulating different components of the model. Specifically, these counterfactuals involved modifying the underlying biological model specifically referent to the evolution and trade-offs between dispersal and competitive abilities, focusing on how dispersal and species interactions affect colonization and other emergent properties in our eco-evolutionary models.

This automatically made species within a simulation not only diverge between each other on their temperature optime $T_i$ and niche widht $\omega_i$ (i.e. for M0, M1 and M2), but also on dispersal $d_i$ and competitive $l_i$ traits (i.e. for M1 and M2). For each counterfactual, we ran 2000 simulations with the same parameters for all models. This systematic exploration of alternative scenarios allowed us to assess the impact of specific model parameters on the resulting biodiversity patterns. We additionally run $XYZ=XYZ$ Specifically, we collected $\alpha$, $\beta$ and $\gamma$ biodiversity metrics, colonization, speciation, extinction as well as trait proxies related to environmental and biotic suitability.

To estimate equilibrium in the context of competition dynamics, we implement an iterative approach. Firstly, all species in a site are checked to determine if $a_{ff}>a_{ff}$ (condition 1, eq. 8). If not, the species is removed from consideration as conspecifics compete weaker than heterospecifics. Next, the carrying capacity ($J^{*}$) is estimated based on the values of $K_f, a_{ff}, a_{fh}$ for each species *f (*eq. 10). Then, all species are checked again to see if the product of the intraspecific competition coefficient and carrying capacity is greater than the product of the interspecific competition coefficient $a_{ff}K>a_{fhJ^{*}}$ (condition 2, eq. 8).Â  Species that do not meet this condition, indicating a too low carrying capacity, are removed, and the estimation process returns estimating $J^{*}$ (eq. 10). This is repeated until all remaining species satisfy the condition 2. Finally, the equilibrium biomass of each species$B^*_f$ is demonstrated using equation 8.

## Initial conditions

We did a full factorial experiment ranging from extreme dispersal and competitive abilities $d_i=$ `r put_brak(sss[[1]]$parms$dispersal)` $l_i=$ `r put_brak(sss[[1]]$parms$competition)` and fixed $\Theta_s=65$ (@fig-init-parameters) . For model M2 we impose the trade-off to the same parameters as in the other models, so that no initial species would have a "assumingly wrong" -- meaning, wrong for consistency of M2. We randomized the seed at this stage, so that each single simulation could be reproduced.

```{r}
#| label: fig-init-parameters
#| fig-height: 2
#| fig-cap: |
#|   Initial competition and dispersal parameters for the main models and 
#|   experiments. Colors show the CPU time per simulation (n=6000). 

# get list of desired stats
lpst <- lapply(sss, function(x){get_parm_stats(x$parms,x$stats$t)})
plot_lxy_summary(y="competition", x="dispersal", data=lpst, datacol="cpu_time", colsrap = c("seagreen","orange3", "red4"))
```

## Results

M0 diversity statistics reflected our expectations on general patterns of diversity, such as highest spetiation rates at intermediary diversity diversity levels @fig-sumstats_1-M0 . Meaning that peaks of $\gamma$ diversity relate with the spatial structure of our landscape. After investigation, all speciation events of simulations with dispersal $d_i<0.1$ happened within patches, and mostly during the dynamic phase (@fig-speciation-M0-though_time A). Speciation within patches was only observed in M0, as for M1 and M2 dispersal quickly evolved beyond the critical and small. We also can notice the qualitative changes in speciation events for intermediary dispersal $d_i=[0.15-0.55]$, which started involving speciation events between patches C and D, but for patch D only at the dynamic time phase, i.e. 2--0 Ma (@fig-speciation-M0-though_time C).

```{r}
#| label: fig-sumstats_1-M0
#| fig-height: 8
#| fig-cap: |
#|   Summary statistics for M0 though dispersal. Each line corresponds to simulation within a same competitive value along dispersal ability.
mbt <- get_parm_stats(parms = sss[[1]]$parms, stat = sss[[1]]$stats$t)
main_stats_names <- c("gamma", "mtx_beta_prop_T","mtx_mean_alpha_T", "mtx_zeta_T","mtx_eta_T","maxlik_betasplit_TF","speciations_perc", "extinctions_perc", "mtx_MPD_S_T", "mtx_MNTD_S_T")#
plot_stat_classes_summary(mbt, main_stats_names)
```

```{r}
#| label: fig-sumstats_rest-M0
#| fig-height: 8
#| fig-cap: |
#|   Additional summary statistics for M0 though dispersal. Each line corresponds to simulation within a same competitive value along dispersal ability.
mbt <- get_parm_stats(parms = sss[[1]]$parms, stat = sss[[1]]$stats$t)
plot_stat_classes_summary(mbt, colnames(mbt)[!colnames(mbt)%in%main_stats_names][6:15])
plot_stat_classes_summary(mbt, colnames(mbt)[!colnames(mbt)%in%main_stats_names][16:25])
plot_stat_classes_summary(mbt, colnames(mbt)[!colnames(mbt)%in%main_stats_names][26:35])
plot_stat_classes_summary(mbt, colnames(mbt)[!colnames(mbt)%in%main_stats_names][36:45])
plot_stat_classes_summary(mbt, colnames(mbt)[!colnames(mbt)%in%main_stats_names][46:55])
plot_stat_classes_summary(mbt, colnames(mbt)[!colnames(mbt)%in%main_stats_names][84:93])
plot_stat_classes_summary(mbt, colnames(mbt)[!colnames(mbt)%in%main_stats_names][c(94:100)])
abline(h=0)
```

```{r}
#| label: fig-speciation-M0-though_time
#| fig-height: 4
#| fig-cap: |
#|   Mean speciation percentage for M0 with dispersal (A) smaller than, 0.15; (B) between 0.15 and 0.55; and (C) bigger than 0.55. We show for each patch (in different collors) and each phase (i.e. Total 4.5-0Ma, Stable 4.5-2.5Ma, Dynamic 2-0Ma) for speciation events between or within patches (respectively triangles and circels).
  mbt <- get_parm_stats(parms = sss[[1]]$parms, 
                        stat = cbind(sss[[1]]$stats$t, sss[[1]]$stats$tt$Total))
  mbs <- get_parm_stats(parms = sss[[1]]$parms, 
                        stat = cbind(sss[[1]]$stats$t, sss[[1]]$stats$tt$Stable))
  mbd <- get_parm_stats(parms = sss[[1]]$parms, 
                        stat = cbind(sss[[1]]$stats$t, sss[[1]]$stats$tt$Dynamic))
  stats_names <- c("speciation_between_A_mean", "speciation_between_B_mean", "speciation_between_C_mean", "speciation_between_D_mean", "speciation_within_A_mean", "speciation_within_B_mean","speciation_within_C_mean", "speciation_within_D_mean")
  lmbt <- list(mbt[,c("dispersal", "gamma", stats_names)], mbs[,c("dispersal", "gamma",  stats_names)], mbd[,c("dispersal",  "gamma", stats_names)])
  
disprange <- patches$disprange
dispnames <- unlist(lapply(disprange, put_brak))
n_dispr <- length(disprange)
## START PLOT  
set_par(n_dispr,ncols = 3)
lvals <- list()
for (disprange_i in 1:n_dispr) {
      # print(disprange_i)
  lvals[[disprange_i]] <- lapply(lmbt, function(x) {
    apply(x[x["dispersal"]>=disprange[[disprange_i]][1]&x["dispersal"]<disprange[[disprange_i]][2],-c(1,2)], 2, function(e){
      gamma <- x[x["dispersal"]>=disprange[[disprange_i]][1]&x["dispersal"]<disprange[[disprange_i]][2],"gamma"]
        mean(e*100,na.rm=T)#quantile(e, probs=c(0.05,0.5,0.95))
      })
    })
  dataplot <- unlist(lvals[[disprange_i]])
  lollipoPlot(dataplot, 
              col=patches$colors, 
              pt.col=patches$colors,
              pch=rep(c(17,16),each=length(patches$names)),
              xaxt="n",
              lwd=1,
              ylim=c(0,7),
              ylab="Mean speciation per Myr",
              lty=rep(c(1,2,3), each=c(2*length(patches$names))))
  text(x=c(1,9,17), y=-0.75, labels=names(sss[[1]]$stats$tt), adj=0)
  title(paste0("d",dispnames[disprange_i]))
  title(LETTERS[disprange_i], adj=0)
  if (disprange_i==2){  
        legend("top", bty="n", c("between patches", "withing patches"), pch=c(17,16),title="Speciation")
  }
  if (disprange_i==1){
        legend("top", bty="n", LETTERS[1:4], text.col = patches$colors, title="Patch", title.col="black" )
  }
  if (disprange_i==3){
        legend("top", bty="n", names(patches$`time-phase`), lty=c(1:3), title="Time phase")
  }
}

```

Investigating spatial dynamics for M0 during 45-0Ma ( @fig-space-M0-though_time A-D) shows that mean range increases with dispersal, while changes leave scale signatures and show that proportional change (i.e. $\frac{(increase - decrease)}{totalrange}$). decreases with competition, while neutral models have higher proportional increase/decrease ratio. Moreover, we can see that this signature was stronger during the dynamic stage of this simulations ( @fig-space-M0-though_time I-L). We can see this

```{r}
#| label: fig-space-M0-though_time
#| fig-height: 4
#| fig-cap: |
#|   Spatial dynamics for M0 during Total 4.5-0Ma (A-D), Stable 4.5-2.5Ma (E-H), Dynamic 2-0Ma (I-L).
# sss[[li]]$stats$tt <- lapply(sss[[li]]$stats$tt, as.data.frame)
stats <- grep("spatial", names(sss$M0$stats$tt$Total), value = T)
stats <- grep("mean", stats, value = T)
stats <- gsub("range_spatial_sps_", "",stats)

for (ir in 1:length(lmbt))
  # ir <- 1

  mbt <- get_parm_stats(parms = sss[[1]]$parms, 
                        stat = sss[[1]]$stats$tt$Total)
  mbs <- get_parm_stats(parms = sss[[1]]$parms, 
                        stat = sss[[1]]$stats$tt$Stable)
  mbd <- get_parm_stats(parms = sss[[1]]$parms, 
                        stat = sss[[1]]$stats$tt$Dynamic)
  stats_names <- paste0("range_spatial_sps_",stats)
  lmbt <- list(mbt[,c("dispersal", "competition", stats_names)], mbs[,c("dispersal", "competition",  stats_names)], mbd[,c("dispersal", "competition", stats_names)])
  names(lmbt) <- names(sss[[1]]$stats$tt)
  set_par(4*3,4)
  # ranget <- range(unlist(lapply(lmbt, function(x){x[,-1]})))
  iab<<-0
  data <- NULL
  teste <- lapply(lmbt, function(data){
    iab<<-iab+1
    rangeis <- range(data[,-1])
    rangeis <- range(data[,-1])
    data$change <- data$`range_spatial_sps_+1_mean`-data$`range_spatial_sps_-1_mean`
    data$change_prop <- (data$`range_spatial_sps_+1_mean`-data$`range_spatial_sps_-1_mean`)/data$`range_spatial_sps_0_mean`
    data$mean_range <- data$`range_spatial_sps_+1_mean`+data$`range_spatial_sps_0_mean`-data$`range_spatial_sps_-1_mean`

    data$prop_increase <- data$`range_spatial_sps_+1_mean`/data$`range_spatial_sps_0_mean`
    data$prop_decrease <- data$`range_spatial_sps_-1_mean`/data$`range_spatial_sps_0_mean`
    plot_stat_classes(mbt=data, cats = "competition", y="mean_range", x="dispersal", plt_type =if(iab==1){"colbar"}else{""})
    title(LETTERS[iab], adj=0)
    iab <<-iab+1
    plot_stat_classes(mbt=data, cats = "competition", y="change_prop", x="dispersal", plt_type ="")
        title(LETTERS[iab], adj=0)
    iab <<-iab+1
    plot_stat_classes(mbt=data, cats = "competition", y="prop_increase", x="dispersal", plt_type ="")
        title(LETTERS[iab], adj=0)
    iab <<-iab+1
    plot_stat_classes(mbt=data, cats = "competition", y="prop_decrease", x="dispersal", plt_type ="")
        title(LETTERS[iab], adj=0)
  })

```

```{r}
#| label: fig-corrplot-M0-phases
#| fig-height: 8
#| fig-cap: |
#|   Correlations for hand-picked summary statistics for M0 for different intervals of dispersal distance 0.3-0.5 (A), ; M1 (B) and M2 (C).

lmodmbt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = cbind(x$stats$t, x$stats$tt$Total))# cbind(x$stats$t, x$stats$tt$Total)
})
# get only sims with at least 10 species
lmodmbt <- lapply(lmodmbt, function(x){
  return(x[x$gamma>=10,])
})
ns <- unlist(lapply(lmodmbt, nrow))

# remove failed stats with NA everywhere
lmodmbt <- lapply(lmodmbt, function(x){
  return(x[,apply(x,2,function(l){all(!is.na(l))})])
})

cor_stats_namess2 <- c(
  "dispersal",
  #"trs_dispersal_50%",
  "competition",
  #"trs_dispersal_slope_time",
  #"trs_spread_dispersal",
  #"trs_competition_50%",
  #"trs_competition_slope_time",
  #"trs_spread_competition",
  #"trs_temp_width_slope_time",
  #"trs_spread_temp_width",
  "speciations_perc",
  "extinctions_perc",
  #"turnover",
  "gamma",
  "mtx_mean_alpha_T",
  "mtx_beta_prop_T",
  "mtx_zeta_T",
  "mtx_eta_T",
  #"mtx.PD_S_T",
  "mtx_MPD_S_T",
  "mtx_MNTD_S_T"
  #"range_spatial_sps_+1_mean",
  #"range_spatial_sps_-1_mean",
  #"range_spatial_sps_0_mean"
  #"maxlik_betasplit_.TF"
  
)
# remove finished
# lmodmbt <- lapply(lmodmbt, function(x){
#   x <- x[, -grep(c("trs_|_A|_B|_C|_D|mtx.NA"),colnames(x))]
#   return(x[,!colnames(x)%in%c("seed","finished", "divergence_threshold", "n_sp_alive_t_0", "cpu_time")])
# })


lmodmbt <- lapply(lmodmbt, function(x){
  change <- x$`range_spatial_sps_+1_mean`-x$`range_spatial_sps_-1_mean`
  change_prop <- change/x$`range_spatial_sps_0_mean`
  x <- cbind(x[, cor_stats_namess2],"change_prop"=change_prop)
})




m0disps <- list()
ranges <- patches$disprange[-1]
disp <- lmodmbt[[1]]$dispersal
for (r_i in 1:length(ranges)){
  mask <- (disp>ranges[[r_i]][1])&(disp<=ranges[[r_i]][2])
  m0disps[[r_i]] <- lmodmbt[[1]][mask,]
}
lapply(m0disps, nrow)
set_par(2,1)
iab<<-0
emp <- lapply(m0disps, function(x){
  iab<<-iab+1
  M <- cor(x, method="pearson") # get pairwise pearson correlation coefficients 
p.mat <- cor.mtest(M)
corrplot(M, method = "square", type =  "upper", diag=FALSE, mar=c(0,0,0.6,0),
          title="", 
         #addCoef.col = "black", # Add coefficient of correlation
         #addCoefasPercent=TRUE,
         addgrid.col=NA,
         tl.srt = 45,
         # Combine with significance
         # p.mat = p.mat, sig.level = 0.05, insig = "blank" 
         tl.col="black"
         # hide correlation coefficient on the principal diagonal
         ) # 
title(LETTERS[iab], adj=0)
title(paste0("M0 ",put_brak(ranges[[iab]])))
})

```

```{r}
#| label: fig-corrplot-all-models
#| fig-height: 8
#| fig-cap: |
#|   Correlations for hand-picked summary statistics for M0 (A); M1 (B) and M2 (C).

lmodmbt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = cbind(x$stats$t, x$stats$tt$Total))# cbind(x$stats$t, x$stats$tt$Total)
})
# get only sims with at least 10 species
lmodmbt <- lapply(lmodmbt, function(x){
  return(x[x$gamma>=10,])
})
ns <- unlist(lapply(lmodmbt, nrow))

# remove failed stats with NA everywhere
lmodmbt <- lapply(lmodmbt, function(x){
  return(x[,apply(x,2,function(l){all(!is.na(l))})])
})

cor_stats_namess2 <- c(
  "dispersal",
  #"trs_dispersal_50%",
  "competition",
  "trs_dispersal_slope_time",
  #"trs_spread_dispersal",
  #"trs_competition_50%",
  "trs_competition_slope_time",
  #"trs_spread_competition",
  "trs_temp_width_slope_time",
  #"trs_spread_temp_width",
  "speciations_perc",
  "extinctions_perc",
  #"turnover",
  "gamma",
  "mtx_mean_alpha_T",
  "mtx_beta_prop_T",
  "mtx_zeta_T",
  "mtx_eta_T",
  #"mtx.PD_S_T",
  "mtx_MPD_S_T",
  "mtx_MNTD_S_T"
  #"range_spatial_sps_+1_mean",
  #"range_spatial_sps_-1_mean",
  #"range_spatial_sps_0_mean"
  #"maxlik_betasplit_.TF"
  
)
# remove finished
# lmodmbt <- lapply(lmodmbt, function(x){
#   x <- x[, -grep(c("trs_|_A|_B|_C|_D|mtx.NA"),colnames(x))]
#   return(x[,!colnames(x)%in%c("seed","finished", "divergence_threshold", "n_sp_alive_t_0", "cpu_time")])
# })
lmodmbt <- lapply(lmodmbt, function(x){
  change <- x$`range_spatial_sps_+1_mean`-x$`range_spatial_sps_-1_mean`
  change_prop <- change/x$`range_spatial_sps_0_mean`
  x <- cbind(x[, cor_stats_namess2],"change_prop"=change_prop)
})


set_par(3,1)
iab<<-0
emp <- lapply(lmodmbt, function(x){
  iab<<-iab+1
  M <- cor(x, method="pearson") # get pairwise pearson correlation coefficients 
p.mat <- cor.mtest(M)
corrplot(M, method = "square", type =  "upper", diag=FALSE, mar=c(0,0,0.6,0),
          title="", 
         #addCoef.col = "black", # Add coefficient of correlation
         #addCoefasPercent=TRUE,
         addgrid.col=NA,
         tl.srt = 45,
         # Combine with significance
         # p.mat = p.mat, sig.level = 0.05, insig = "blank" 
         tl.col="black"
         # hide correlation coefficient on the principal diagonal
         ) # 
title(LETTERS[iab], adj=0)
title(names(lmodmbt)[iab])
})

```

Inspecting the community distances between all the patches, there is a clear effect of increase in community diversity with patch distance and dispersal ability @fig-sumstats_2-M0 . As expected **\[refs\]**, competition tends to decrease community distance overall where communities reach maximum diversity.

```{r}
#| label: fig-sumstats_2-M0
#| fig-height: 6
#| fig-cap: |
#|   Community Distance betwen patches A, B, C and D for M0. Each line corresponds to simulations with a same competitive value.
mbt <- get_parm_stats(parms = sss[[1]]$parms, stat = sss[[1]]$stats$t)
plot_stat_between_patches <- c("mtx.CD_S")
stats_names <- grep(plot_stat_between_patches, colnames(sss[[1]]$stats$t), value=T)
n_stats <- length(stats_names)
par(mfrow=c(round(n_stats/2, 0), 2))
for (stat_i in 1:n_stats){
  mask_mbt <- mbt$n_sp_alive_t_0>=3
  plot_stat_classes(mbt[mask_mbt,], cats="competition", y=stats_names[stat_i], x="dispersal", plt_type="FALSE")
  title(LETTERS[stat_i], adj=0)
    if (stat_i==1){ # plot colbar
    classes <- unique(mbt[,"competition"])
    n_classes <- length(classes)
    cols <- rev(gen3sis::color_richness_non_CVDCBP(n_classes))
    ypos1 <- max(mbt[,stats_names[stat_i]], na.rm=T)
    
    
    width_colbar <- 0.08
    length_colbar <- 0.8
    ypos3 <- ypos1-150-width_colbar
    xpos <- 0.2
    colorbar.plot(x=xpos, y=mean(c(ypos1, ypos3)), strip=1:n_classes, col = cols, 
                  strip.width=width_colbar, strip.length=length_colbar,
                  horizontal = TRUE, adj.y=0.5)
    text(x=xpos, y=ypos1, labels = "Competition (l)")
    text(x=xpos-0.1, y=ypos3, labels = "0.9 \n *")
    text(x=xpos+0.1, y=ypos3, labels = "1 \n neutral", adj=0)
    
    }
}
```

```{r}
#| label: fig-sumstats_1-M1
#| fig-height: 6
#| fig-cap: |
#|   Summary statistics for M1 though dispersal. Each line corresponds to simulation within a same competitive value along dispersal ability.
mbt <- get_parm_stats(parms = sss[[2]]$parms, stat = sss[[2]]$stats$t)

plot_stat_classes_summary(mbt, main_stats_names)
```

```{r}
#| label: fig-sumstats_2-M1
#| fig-height: 6
#| fig-cap: |
#|   Community Distance betwen patches A, B, C and D for M0. Each line corresponds to simulations with a same competitive value.
mbt <- get_parm_stats(parms = sss[[2]]$parms, stat = sss[[2]]$stats$t)
plot_stat_between_patches <- c("mtx.CD_S")
stats_names <- grep(plot_stat_between_patches, colnames(sss[[2]]$stats$t), value=T)
n_stats <- length(stats_names)
par(mfrow=c(round(n_stats/2, 0), 2))
for (stat_i in 1:n_stats){
  mask_mbt <- mbt$n_sp_alive_t_0>=3
  plot_stat_classes(mbt[mask_mbt,], cats="competition", y=stats_names[stat_i], x="dispersal", plt_type="FALSE")
  title(LETTERS[stat_i], adj=0)
    if (stat_i==1){ # plot colbar
    classes <- unique(mbt[,"competition"])
    n_classes <- length(classes)
    cols <- rev(gen3sis::color_richness_non_CVDCBP(n_classes))
    ypos1 <- max(mbt[,stats_names[stat_i]], na.rm=T)
    
    
    width_colbar <- 0.08
    length_colbar <- 0.8
    ypos3 <- ypos1-150-width_colbar
    xpos <- 0.2
    colorbar.plot(x=xpos, y=mean(c(ypos1, ypos3)), strip=1:n_classes, col = cols, 
                  strip.width=width_colbar, strip.length=length_colbar,
                  horizontal = TRUE, adj.y=0.5)
    text(x=xpos, y=ypos1, labels = "Competition (l)")
    text(x=xpos-0.1, y=ypos3, labels = "0.9 \n *")
    text(x=xpos+0.1, y=ypos3, labels = "1 \n neutral", adj=0)
    
    }
}
```

```{r}
#| label: fig-sumstats_1-M2
#| fig-height: 6
#| fig-cap: |
#|   Summary statistics for M2 though dispersal. Each line corresponds to simulation within a same competitive value along dispersal ability.
mbt <- get_parm_stats(parms = sss[[3]]$parms, stat = sss[[3]]$stats$t)
plot_stat_classes_summary(mbt, main_stats_names)
```

```{r}
#| label: fig-sumstats_2-M2
#| fig-height: 6
#| fig-cap: |
#|   Community Distance betwen patches A, B, C and D for M0. Each line corresponds to simulations with a same competitive value.
mbt <- get_parm_stats(parms = sss[[3]]$parms, stat = sss[[3]]$stats$t)
plot_stat_between_patches <- c("mtx.CD_S")
stats_names <- grep(plot_stat_between_patches, colnames(sss[[3]]$stats$t), value=T)
n_stats <- length(stats_names)
par(mfrow=c(round(n_stats/2, 0), 2))
for (stat_i in 1:n_stats){
  mask_mbt <- mbt$n_sp_alive_t_0>=3
  plot_stat_classes(mbt[mask_mbt,], cats="competition", y=stats_names[stat_i], x="dispersal", plt_type="FALSE")
  title(LETTERS[stat_i], adj=0)
    if (stat_i==1){ # plot colbar
    classes <- unique(mbt[,"competition"])
    n_classes <- length(classes)
    cols <- rev(gen3sis::color_richness_non_CVDCBP(n_classes))
    ypos1 <- max(mbt[,stats_names[stat_i]], na.rm=T)
    
    
    width_colbar <- 0.08
    length_colbar <- 0.8
    ypos3 <- ypos1-150-width_colbar
    xpos <- 0.2
    colorbar.plot(x=xpos, y=mean(c(ypos1, ypos3)), strip=1:n_classes, col = cols, 
                  strip.width=width_colbar, strip.length=length_colbar,
                  horizontal = TRUE, adj.y=0.5)
    text(x=xpos, y=ypos1, labels = "Competition (l)")
    text(x=xpos-0.1, y=ypos3, labels = "0.9 \n *")
    text(x=xpos+0.1, y=ypos3, labels = "1 \n neutral", adj=0)
    
    }
}
```

### Model Comparison

```{r}
#| label: fig-model-comp-stats1
#| fig-height: 8
#| fig-cap: |
#|   Comparison of M0, M1 and M2 for 8 summary statistics. Dispersal x axis plot the mean dispersal trait at the end of the simulation, rather than the initial dispersal parameter. THe same applies for the competition values that color the points, i.e. 
lt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = x$stats$t)# cbind(x$stats$t, x$stats$tt$Total)
})

# stats <- grep("_T", names(sss$M0$stats$t), value = T)
stats <- main_stats_names[-c(4,5)]

set_par(length(stats)*length(lt),length(lt))
ita <<- 0
# lapply(lt, function(x){
# hist(x$trs_spread_temp_width)
# })
for (stats_i in 1:length(stats)){
  
  ylimt <- range(unlist(lapply(lt, function(x){x[[stats[stats_i]]]})), na.rm=T)
  xlimt <- range(unlist(lapply(lt, function(x){x[["trs_dispersal_50%"]]})), na.rm=T)
  
lapply(lt, function(x){
  ita <<-ita+1
  
# plot(x$`trs_dispersal_50%`,x[[stats[stats_i]]], xlab="dispersal", ylab=stats[stats_i], cex=0.7, xlim=c(0,1), ylim=ylimt)
  y_n <- stats[stats_i]
  x_n <- "trs_dispersal_50%"
  plot_stat_classes_p(x, 
                      y=y_n, 
                      x=x_n, 
                      cats="trs_competition_50%", 
                      ylim=ylimt, 
                      xlim=xlimt,  
                      ylab=y_n,
                      xlab=x_n,
                      plt_type=if(ita==1){"colbar"}else{"NULL"}, 
                      yposbar = mean(ylimt))

title(LETTERS[ita], adj=0)
if(ita<=length(lt)){
  title(names(sss)[ita])
}
})

}
```

```{r}
#| label: fig-model-comp-traits
#| fig-height: 8
#| fig-cap: |
#|   Comparison of M0, M1 and M2 for 8 summary statistics. Dispersal x axis plot the mean dispersal trait at the end of the simulation, rather than the initial dispersal parameter. THe same applies for the competition values that color the points, i.e. 
lt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = cbind(x$stats$t, x$stats$tt$Total))# cbind(x$stats$t, x$stats$tt$Total)
})

# stats <- grep("_T", names(sss$M0$stats$t), value = T)
stats <- main_stats_names[-c(4,5)]

set_par(length(stats)*length(lt),length(lt))
ita <<- 0
# lapply(lt, function(x){
# hist(x$trs_spread_temp_width)
# })
for (stats_i in 1:length(stats)){
  
  ylimt <- range(unlist(lapply(lt, function(x){x[[stats[stats_i]]]})), na.rm=T)
  xlimt <- range(unlist(lapply(lt, function(x){x[["trs_dispersal_50%"]]})), na.rm=T)
  
lapply(lt, function(x){
  ita <<-ita+1
  
# plot(x$`trs_dispersal_50%`,x[[stats[stats_i]]], xlab="dispersal", ylab=stats[stats_i], cex=0.7, xlim=c(0,1), ylim=ylimt)
  y_n <- stats[stats_i]
  x_n <- "trs_dispersal_50%"
  plot_stat_classes_p(x, 
                      y=y_n, 
                      x=x_n, 
                      cats="trs_competition_50%", 
                      ylim=ylimt, 
                      xlim=xlimt,  
                      ylab=y_n,
                      xlab=x_n,
                      plt_type=if(ita==1){"colbar"}else{"NULL"}, 
                      yposbar = mean(ylimt))

title(LETTERS[ita], adj=0)
if(ita<=length(lt)){
  title(names(sss)[ita])
}
})

}
```

### Trait Changes

```{r}
#| label: fig-final-traits-change-location for M0
#| fig-height: 6
#| fig-cap: |
#|   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

stats <- grep("_slope_time", names(sss$M0$stats$tt$Total), value = T)
#stats <- grep("mean", stats, value = T)
# stats <- gsub("range_spatial_sps_", "",stats)

lmodmbt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = x$stats$tt$Total)# cbind(x$stats$t, x$stats$tt$Total)
})

plot_stat_classes_summary(lmodmbt[[1]], stats, colbar.at = 1000)
```

```{r}
#| label: fig-final-traits-change-location for M1
#| fig-height: 6
#| fig-cap: |
#|   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

plot_stat_classes_summary(lmodmbt[[2]], stats, colbar.at = 1000)


plot_stat_classes()

```

```{r}
#| label: fig-final-traits-change-location for M2
#| fig-height: 6
#| fig-cap: |
#|   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

plot_stat_classes_summary(lmodmbt[[3]], stats, colbar.at = 1000)
```

### Traits exploration

```{r}
#| label: fig-final-traits-XXXXX
#| fig-height: 6
#| fig-cap: |
#|   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
lt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = x$stats$t)# cbind(x$stats$t, x$stats$tt$Total)
})

lt <- lapply(lt, function(x){
  x <- x[x$gamma>9,]
})

stats <- grep("trs_*_50%", names(sss$M0$stats$t), value = T)
#stats <- grep("mean", stats, value = T)
# stats <- gsub("range_spatial_sps_", "",stats)

stats_i <- c(4,2,3) # order of plot

set_par(length(stats_i)*length(lt),length(stats_i))
ita <<- 0
# lapply(lt, function(x){
# hist(x$trs_spread_temp_width)
# })
for (indexi in 1:length(stats_i)){
  
  ylimt <- range(unlist(lapply(lt, function(x){x[[stats[stats_i[indexi]]]]})))
  
lapply(lt, function(x){
  ita <<-ita+1
plot(x[[stats[1]]],x[[stats[stats_i[indexi]]]], xlab=stats[1], ylab=stats[stats_i[indexi]], cex=0.5, xlim=c(0,1), ylim=ylimt)
title(LETTERS[ita], adj=0)
if(ita<=length(lt)){
  title(names(sss)[ita])
}
})

}
```

```{r}
#| label: fig-testing-of-limiting similarity
#| fig-height: 6
#| fig-cap: |
#|  The theory of limiting similarity predicts that as species diversity 
#|  increases, the average population size of each species decreases due to the
#|  need for coexisting species to be sufficiently different to coexist,
#|  resulting in lower population sizes when higher competition is present.

lt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = cbind(x$stats$t, x$stats$tt$Total))# cbind(x$stats$t, x$stats$tt$Total)
})

lt <- lapply(lt, function(x){
  x <- x[x$gamma>3,]
})

y_n <- "gamma"
x_n <- "range_spatial_sps_0_mean"
c_n <- "trs_competition_50%"
yliml <- range(unlist(lapply(lt, function(x){x[y_n]})), na.rm=T)
xliml <- range(unlist(lapply(lt, function(x){x[x_n]})), na.rm=T)
set_par(length(lt),length(lt))
ita <<-0
lapply(lt, function(x){
  ita <<-ita+1
  plot_stat_classes_p(x, y=y_n, x=x_n, cats=c_n, ylim=yliml, xlim=xliml,  ylab=y_n,
                      xlab=expression(Mean~range~"("~1e+10~m^2~")"),
                      plt_type=if(ita==length(lt)){"colbar"}else{"NULL"}, yposbar = 0.9*yliml[2])
  title(names(lt)[ita])
  title(LETTERS[ita], adj=0)
})
```

As mentioned by

```{r}
#| label: fig-testing-comp-speciation-dispersal
#| fig-height: 6
#| fig-cap: |
#|   Speciation versus extinction percentage (A-C) and temporal invariability (i.e. temporal stability of macroevolutionary
#|   events) (D-F). M2 was the only model that show increased interspecific competition enhancing extinction and cincrease
#|   speciation.

lt <- lapply(sss, function(x){
  get_parm_stats(parms = x$parms,
                 stat = cbind(x$stats$t, x$stats$tt$Total))# cbind(x$stats$t, x$stats$tt$Total)
})

lt <- lapply(lt, function(x){
  x <- x[x$gamma>=20,]
})

set_par(length(lt)*2,length(lt))




y_n <- "speciations_perc"
x_n <- "extinctions_perc"
c_n <- "trs_competition_50%"
yliml <- range(unlist(lapply(lt, function(x){x[y_n]})), na.rm=T)
#yliml[1] <- 0.85
xliml <- range(unlist(lapply(lt, function(x){x[x_n]})), na.rm=T)
#yliml <- range(c(yliml, xliml))
#xliml <- yliml
#yliml[1] <- 0.8
ita <<-0
lapply(lt, function(x){
  ita <<-ita+1
  plot_stat_classes_p(x, y=y_n, x=x_n, cats=c_n, ylim=yliml, xlim=xliml,  ylab=y_n,
                      cex_p=0.5+x$`trs_dispersal_50%`,
                      pch_p=1,
                      xlab=x_n,
                      plt_type=if(ita==1){"colbar"}else{"NULL"}, yposbar = mean(yliml))
  title(names(lt)[ita])
  title(LETTERS[ita], adj=0)
  abline(h=1)
  abline
})
y_n <- "speciations_invar"
x_n <- "extinction_invar"
c_n <- "trs_competition_50%"
yliml <- range(unlist(lapply(lt, function(x){x[y_n]})), na.rm=T)
xliml <- range(unlist(lapply(lt, function(x){x[x_n]})), na.rm=T)

lapply(lt, function(x){
  ita <<-ita+1
  plot_stat_classes_p(x, y=y_n, x=x_n, cats=c_n, ylim=yliml, xlim=xliml,  ylab=y_n, 
                      cex_p=x$`trs_dispersal_50%`,
                      pch_p=1,
                      xlab=x_n,
                      plt_type=if(ita==length(lt)){"colbar"}else{"NULL"}, yposbar = 0.9*yliml[2])
  title(names(lt)[ita])
  title(LETTERS[ita], adj=0)
})
```
